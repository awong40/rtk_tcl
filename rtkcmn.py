# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_rtkcmn', [dirname(__file__)])
        except ImportError:
            import _rtkcmn
            return _rtkcmn
        if fp is not None:
            try:
                _mod = imp.load_module('_rtkcmn', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _rtkcmn = swig_import_helper()
    del swig_import_helper
else:
    import _rtkcmn
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def fatalerr(*args):
  return _rtkcmn.fatalerr(*args)
fatalerr = _rtkcmn.fatalerr

def satno(*args):
  return _rtkcmn.satno(*args)
satno = _rtkcmn.satno

def satsys(*args):
  return _rtkcmn.satsys(*args)
satsys = _rtkcmn.satsys

def mat(*args):
  return _rtkcmn.mat(*args)
mat = _rtkcmn.mat

def imat(*args):
  return _rtkcmn.imat(*args)
imat = _rtkcmn.imat

def dot(*args):
  return _rtkcmn.dot(*args)
dot = _rtkcmn.dot

def norm(*args):
  return _rtkcmn.norm(*args)
norm = _rtkcmn.norm

def matcpy(*args):
  return _rtkcmn.matcpy(*args)
matcpy = _rtkcmn.matcpy

def matmul(*args):
  return _rtkcmn.matmul(*args)
matmul = _rtkcmn.matmul

def ludcmp(*args):
  return _rtkcmn.ludcmp(*args)
ludcmp = _rtkcmn.ludcmp

def lubksb(*args):
  return _rtkcmn.lubksb(*args)
lubksb = _rtkcmn.lubksb

def matinv(*args):
  return _rtkcmn.matinv(*args)
matinv = _rtkcmn.matinv

def solve(*args):
  return _rtkcmn.solve(*args)
solve = _rtkcmn.solve

def lsq(*args):
  return _rtkcmn.lsq(*args)
lsq = _rtkcmn.lsq

def time2epoch(*args):
  return _rtkcmn.time2epoch(*args)
time2epoch = _rtkcmn.time2epoch

def timeadd(*args):
  return _rtkcmn.timeadd(*args)
timeadd = _rtkcmn.timeadd

def time2str(*args):
  return _rtkcmn.time2str(*args)
time2str = _rtkcmn.time2str

def time_str(*args):
  return _rtkcmn.time_str(*args)
time_str = _rtkcmn.time_str

def ecef2pos(*args):
  return _rtkcmn.ecef2pos(*args)
ecef2pos = _rtkcmn.ecef2pos
# This file is compatible with both classic and new-style classes.


